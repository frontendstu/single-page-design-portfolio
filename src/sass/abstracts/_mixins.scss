// MIXINS
//
// This partial contains reusable Sass mixins to promote consistency and reduce 
// repetition across the codebase. Mixins encapsulate common patterns such as 
// media queries, layout utilities, etc.
//
// Mixins are intended to keep declarations DRY and maintainable.

// FONT FACE
//
// Generates a `@font-face` rule for importing custom fonts.
//
// This mixin simplifies font registration and enforces best practices like 
// `font-display: swap` for improved performance.
//
/// @param {String} $font-family - The name of the font family
/// @param {String} $font-uri - The relative path to the font file
/// @param {Number|String} $font-weight - The relative font weight
/// @param {String} $font-style ['normal'] - The font style
/// 
/// @example scss - Usage
///     @include font-face('Inter', 'fonts/Inter.woff2', 400);

@mixin font-face($font-family, $font-uri, $font-weight, $font-style: normal) {
    @font-face {
        src: url(#{$font-uri});
        font-weight: $font-weight;
        font-family: $font-family;
        font-style: $font-style;
    }
}

// LINK STATES
//
// These mixins provide reusable patterns for managing link and interactive 
// element states. They encapsulate common pseudo-class combinations to ensure 
// consistent styling and accessibility across the UI.
//
// Included mixins:
// - hover              : Applies styles on `:hover` only
// - hover-focus        : Applies styles on `:hover` and `:focus-visible`
// - hover-focus-within : Applies styles on `:hover`, `:focus-within`
// - focus              : Applies styles on `:focus-visible` only
// - focus-within       : Applies styles on `:focus-within` only
// - focus-all          : Applies sytles on `:focus-visible`, `:focus-within`

@mixin hover {
    &:hover {
        @content;
    }
}

@mixin hover-focus {
    &:hover,
    &:focus-visible {
        @content;
    }
}

@mixin hover-focus-within {
    &:hover,
    &:focus-within {
        @content;
    }
}

@mixin focus {
    &:focus-visible {
        @content;
    }
}

@mixin focus-within {
    &:focus-within {
        @content;
    }
}

@mixin focus-all {
    &:focus-visible,
    &:focus-within {
        @content;
    }
}

// FLEXBOX
//
// This mixin provides a shorthand utility for applying common Flexbox layout 
// properties in a consistent and readable way. It simplifies the declaration 
// of `display: flex;` along with optional arguments and direction settings.
//
// This mixin is intended for layout scaffolding and should be used in layout 
// or component partials where Flexbox alignment and spacing are needed.

// Mixin: flex($align: null, $justify: null, $direction: null, $gap: null)
/// @param {String} $align - Sets `align-items` (default: center)
/// @param {String} $justify - Sets `justify-content` (default: center)
/// @param {String} $direction - Sets `flex-direction` (default: column)
/// @param {String | null} $gap - Sets `gap` between flex items (default: null)
/// 
/// @example scss - Basic usage
///     @include flex(center, center, row, 1rem);

@mixin flex($align: center, $justify: center, $direction: column, $gap: null) {
    display: felx;
    align-items: $align;
    justify-content: $justify;
    flex-direction: $direction;
    gap: $gap;
}
